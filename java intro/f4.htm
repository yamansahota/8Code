<html>

<body>
    <link href="assets/css/f1style.css" rel="stylesheet">

    <h1>Variables Types and Naming</h1>
    <p>The Java programming language defines the following kinds of variables:
    <p>int cadence = 0; <br>
        int speed = 0; <br>
        int gear = 1;</p>

    <h2> Instance Variables (Non-Static Fields) :</h2><p>  Technically speaking, objects store their individual states in
        "non-static fields", that is, fields declared without the static keyword. Non-static fields are also known as
        instance variables because their values are unique to each instance of a class (to each object, in other words);
        the currentSpeed of one bicycle is independent from the currentSpeed of another. </p>
        <h2> Class Variables (Static Fields) :</h2><p> A class variable is any field declared with the static modifier; this tells
        the
        compiler that there is exactly one copy of this variable in existence, regardless of how many times the class
        has been instantiated. A field defining the number of gears for a particular kind of bicycle could be marked as
        static since conceptually the same number of gears will apply to all instances. The code static int numGears =
        6; would create such a static field. Additionally, the keyword final could be added to indicate that the number
        of gears will never change. </p>
       <h2>  Local Variables :</h2> <p> Similar to how an object stores its state in fields, a method will often store its temporary
        state in local variables. The syntax for declaring a local variable is similar to declaring a field (for
        example, int count = 0;). There is no special keyword designating a variable as local; that determination comes
        entirely from the location in which the variable is declared — which is between the opening and closing braces
        of a method. As such, local variables are only visible to the methods in which they are declared; they are not
        accessible from the rest of the class. </p>
        <h2> Parameters : </h2> <p>You've already seen examples of parameters, both in the Bicycle class and in the main method of the
        "Hello World!" application. Recall that the signature for the main method is public static void main(String[]
        args). Here, the args variable is the parameter to this method. The important thing to remember is that
        parameters are always classified as "variables" not "fields". This applies to other parameter-accepting
        constructs as well (such as constructors and exception handlers) that you'll learn about later in the tuto</p>

    <h1>Rules for Naming the Variables</h1>
    <p>▪️ Variable names are case-sensitive. A variable's name can be any legal identifier — an unlimited-length sequence
        of Unicode letters and digits, beginning with a letter, the dollar sign "$", or the underscore character "_".
        The convention, however, is to always begin your variable names with a letter, not "$" or "_". Additionally, the
        dollar sign character, by convention, is never used at all. You may find some situations where auto-generated
        names will contain the dollar sign, but your variable names should always avoid using it. A similar convention
        exists for the underscore character; while it's technically legal to begin your variable's name with "_", this
        practice is discouraged. White space is not permitted. <br><br>
        ▪️ Subsequent characters may be letters, digits, dollar signs, or underscore characters. Conventions (and common
        sense) apply to this rule as well. When choosing a name for your variables, use full words instead of cryptic
        abbreviations. Doing so will make your code easier to read and understand. In many cases it will also make your
        code self-documenting; fields named cadence, speed, and gear, for example, are much more intuitive than
        abbreviated versions, such as s, c, and g. Also keep in mind that the name you choose must not be a keyword or
        reserved word.</p>
</body>

</html>